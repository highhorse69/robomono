{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nexport const requestRobots = () => dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/Users/mac/Desktop/Robomono/robomono.io/src/action.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SAAQA,mBAAR,EACQC,sBADR,EAEQC,sBAFR,EAGQC,qBAHR,QAGoC,gBAHpC;AAOA,OAAO,MAAMC,cAAc,GAAEC,IAAD,KAAS;AACrCC,EAAAA,IAAI,EAACN,mBADgC;AAGrCO,EAAAA,OAAO,EAAEF;AAH4B,CAAT,CAArB;AAMP,OAAO,MAAMG,aAAa,GAAG,MAAKC,QAAD,IAAY;AAEzCA,EAAAA,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAACL;AAAN,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EADhB,EAECF,IAFD,CAEMG,IAAI,IAAEL,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAACJ,sBAAN;AAA6BK,IAAAA,OAAO,EAACO;AAArC,GAAD,CAFpB,EAGCC,KAHD,CAGOC,KAAK,IAAEP,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAACH,qBAAN;AAA4BI,IAAAA,OAAO,EAACS;AAApC,GAAD,CAHtB;AAIH,CAPM","sourcesContent":["import {CHANGE_SEARCH_FIELD,\n        REQUEST_ROBOTS_PENDING,\n        REQUEST_ROBOTS_SUCCESS,\n        REQUEST_ROBOTS_FAILED} from './constants.js';\n\n\n\nexport const setSearchField=(text)=>({\ntype:CHANGE_SEARCH_FIELD,\n\npayload: text\n\n})\nexport const requestRobots = ()=>(dispatch)=>{\n\n    dispatch({type:REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\n    .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\n}\n"]},"metadata":{},"sourceType":"module"}